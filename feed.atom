<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ririyad.github.io/rssreads/index.html</id>
    <title>osmos::feed</title>
    <updated>2023-05-12T01:09:57.251Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="https://ririyad.github.io/rssreads/index.html"/>
    <link rel="self" href="https://ririyad.github.io/rssreads/feed.atom"/>
    <entry>
        <title type="html"><![CDATA[We stand with the Underdogs]]></title>
        <id>https://world.hey.com/jason/we-stand-with-the-underdogs-7d487d64</id>
        <link href="https://world.hey.com/jason/we-stand-with-the-underdogs-7d487d64"/>
        <updated>2023-05-11T17:52:59.000Z</updated>
        <summary type="html"><![CDATA[What do they got?
A big team, lots of money, a strong brand, seemingly unlimited resources, panache, reputation, all that. They’re established.
They’re your competitors.
You want to look away, but you see them everywhere. Their ads on your social, their name in the media, your dream clients on their website.
But you know what else they got?
Bigger company bloat. Overflowing obligations. Narratives to uphold. Appearances to maintain. Entitlement. Too much overhead. 
They’re slow. They’re conservative. They talk too much. They’ve stopped taking risks. They’re resting on their laurels, gliding on their reputation. They’re on defense.
What they’ve really got is a lot to lose.
What do you got?
Hunger. Drive. Grit. Scrappiness. Independence. You’re on offense.
You don’t have enough, which is why you’re dangerous. You have no choice but to be clever and creative. To make up for what you don’t have with something they can’t have: The underdog spirit.
You can move. You can adjust. You can adapt. You can get it done while they’re still stuck deciding what to do.
Small is not a stepping stone. Small is not less than. It’s greater than. It’s faster than. It’s better than.
Savor your position. You don’t get to be the underdog forever. The baton will be passed. But for now, it’s your magic wand. Use it.
We stand with the underdogs.

-Jason]]></summary>
        <author>
            <name>Jason Fried</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[It's not just cloud costs that are out of control]]></title>
        <id>https://world.hey.com/dhh/it-s-not-just-cloud-costs-that-are-out-of-control-efcd098c</id>
        <link href="https://world.hey.com/dhh/it-s-not-just-cloud-costs-that-are-out-of-control-efcd098c"/>
        <updated>2023-05-11T08:40:28.000Z</updated>
        <summary type="html"><![CDATA[We're letting our yearly commitment to Datadog, a performance and monitoring tool, expire at the end of this month. Not because we don't like the service. It's actually really nice! But because the $88,000/year it was going to cost us to continue is just ridiculous. And it's emblematic of a larger issue: Enterprise SaaS pricing is getting silly.
But as silly as I thought our bill was going to be, there's a Datadog customer paying $65 million for their services!! This came up on their most recent earnings call. It's apparently a crypto company who "optimized" their bill by committing to this ludicrous spend:
  
      
        

  
At the risk of invoking a tired cliche, this kind of outlay for a performance and monitoring service sounds like a 0% interest rate phenomenon. There's just no un…]]></summary>
        <author>
            <name>David Heinemeier Hansson</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[You can learn AI later]]></title>
        <id>https://world.hey.com/jason/you-can-learn-ai-later-08fce896</id>
        <link href="https://world.hey.com/jason/you-can-learn-ai-later-08fce896"/>
        <updated>2023-05-10T16:06:06.000Z</updated>
        <summary type="html"><![CDATA[Throw a dart on LinkedIn, or toss one into the ether on Twitter, and you'll likely hit a post proclaiming that you better "learn AI" or you're falling behind.
Master the tools and become a prompt engineer or someone else will tell the AI to summarize the long documents, kick off initial first drafts, and rewrite the headlines for you!
Nonsense.
This isn't saying AI, ChatGPT, or whatever comes next is nonsense. It's very real, very powerful, and very here.
But there's nothing you need to learn, or do, right now, other than be curious. Play around, kick the tires, poke and prod. Get a feel for what this new sauce tastes like. Have fun, it's not a test.
But become a master at once or you're going to lose your job to some AI expert? Nah. That's pure FUD. The stuff that everyone's talking about is barely 6 months old — there are no experts, there are just people playing experts on the internet.
Besides, the best way to learn something is to need that something. Learning when you don't really need to is a good way to give up early. Learning when there's something you truly need to do, but can't, but could, is the right time to figure something out.
They say necessity is the mother of invention, but it's really the impetus for learning. The time will come, and you can figure it out then. If anything, it'll be easier to learn how to use AI once it settles in a bit. Currently it's a moving target.
So wait on it. Pop the pressure. Don't feel like you're falling behind. And don't drop everything to dig in. Start curious, stay curious, know what it's capable of, and, when the necessity strikes, figure it out. Until then, ignore the demands and focus on doing what you're already good at.

-Jason]]></summary>
        <author>
            <name>Jason Fried</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The misallocation of tech talent]]></title>
        <id>https://world.hey.com/dhh/the-misallocation-of-tech-talent-6c3b4403</id>
        <link href="https://world.hey.com/dhh/the-misallocation-of-tech-talent-6c3b4403"/>
        <updated>2023-05-09T09:13:09.000Z</updated>
        <summary type="html"><![CDATA[Getting fired sucks. It doesn't matter how or when. It just sucks. And right now there are an awful lot of people in the tech industry feeling just how much. But what's bad for the individual isn't always bad for the group. Believe it or not, there's also collective upside to the massive tech layoffs happening at the moment.
Like undoing the absurd hiring spree committed by the largest tech companies during the pandemic. This spree swallowed up a preposterous amount of talent, then put much of it to work on bullshit projects with little to no value for the company or the economy as a whole.
Such hoarding of tech talent represented a tragic misallocation of productive capacity. The likes of Amazon, Meta, Google, and many others added tens of thousands of positions to already bloated bureauc…]]></summary>
        <author>
            <name>David Heinemeier Hansson</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Updating Rust's Linux musl targets]]></title>
        <id>https://blog.rust-lang.org/2023/05/09/Updating-musl-targets.html</id>
        <link href="https://blog.rust-lang.org/2023/05/09/Updating-musl-targets.html"/>
        <updated>2023-05-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Beginning with Rust 1.71 (slated for stable release on 2023-07-13), the various *-linux-musl targets will ship with musl 1.2.3.
These targets currently use musl 1.1.24.
While musl 1.2.3 introduces some new features, most notably 64-bit time on all platforms, it is ABI compatible with earlier musl versions.
As such, this change is unlikely to affect you.
Updated targets
The following targets will be updated:
Target
Support Tier




aarch64-unknown-linux-musl
Tier 2 with Host Tools


x86_64-unknown-linux-musl
Tier 2 with Host Tools


arm-unknown-linux-musleabi
Tier 2


arm-unknown-linux-musleabihf
Tier 2


armv5te-unknown-linux-musleabi
Tier 2


armv7-unknown-linux-musleabi
Tier 2


armv7-unknown-linux-musleabihf
Tier 2


i586-unknown-linux-musl
Tier 2


i686-unknown-linux-musl
Tier 2


mips-unknown-linux-musl
Tier 2


mips64-unknown-linux-muslabi64
Tier 2


mips64el-unknown-linux-muslabi64
Tier 2


mipsel-unknown-linux-musl
Tier 2


hexagon-unknown-linux-musl
Tier 3


mips64-openwrt-linux-musl
Tier 3


powerpc-unknown-linux-musl
Tier 3


powerpc64-unknown-linux-musl
Tier 3


powerpc64le-unknown-linux-musl
Tier 3


riscv32gc-unknown-linux-musl
Tier 3


riscv64gc-unknown-linux-musl
Tier 3


s390x-unknown-linux-musl
Tier 3


thumbv7neon-unknown-linux-musleabihf
Tier 3



Note: musl 1.2.3 does not raise the minimum required Linux kernel version for any target.
Will 64-bit time break the libc crate on 32-bit targets?
No, the musl project made this change carefully preserving ABI compatibility.
The libc crate will continue to function correctly without modification.
A future version of the libc crate will update the definitions of time-related structures and functions to be 64-bit on all musl targets however this is blocked on the musl targets themselves first being updated.
At present, there is no anticipated date when this change will take place and care will be taken to help the Rust ecosystem transition successfully to the updated time-related definitions.]]></summary>
        <author>
            <name>Rust Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[API token scopes]]></title>
        <id>https://blog.rust-lang.org/inside-rust/2023/05/09/api-token-scopes.html</id>
        <link href="https://blog.rust-lang.org/inside-rust/2023/05/09/api-token-scopes.html"/>
        <updated>2023-05-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Roughly three years ago Pietro Albini opened an RFC called "crates.io token scopes". This RFC described an improvement to the existing API tokens, that everyone is using to publish crates to the crates.io package registry. The proposal was to make it possible to restrict API tokens to 1) certain operations and 2) certain crates.
Unfortunately, the crates.io team members were quite busy at the time, so it took a while for this proposal to get accepted. To be precise, during the EuroRust conference in October 2022 we talked about the RFC again and after a few modifications the RFC was moved into FCP status and then finally merged.
The implementation was started soon after, but was paused again due to other priorities at the time. Fortunately, I was lucky enough to get one of the software engineering jobs at the Rust Foundation, so in early April the development continued, and I am happy to report:
API token scopes on crates.io are now in a public beta testing period!
For details on what these token scopes are and how they are supposed to work, I recommend reading through the RFC. If you want to try them out, you can go to https://crates.io/settings/tokens/new and create a new API token scoped to the operations and crates you want:

Please note that this page is currently not reachable from the regular user interface, you have to access it via URL directly while we test it out.
Finally, if you notice any issues, or if you have any questions don't hesitate to find us on Zulip or open an issue on GitHub.]]></summary>
        <author>
            <name>Inside Rust Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[On hiring, rehiring, and one question to answer them all]]></title>
        <id>https://world.hey.com/jason/on-hiring-rehiring-and-one-question-to-answer-them-all-5db97bcb</id>
        <link href="https://world.hey.com/jason/on-hiring-rehiring-and-one-question-to-answer-them-all-5db97bcb"/>
        <updated>2023-05-08T15:52:19.000Z</updated>
        <summary type="html"><![CDATA[Out of all things I’m asked about, hiring tops the list. From the actual hiring process, to reviews, to motivation and retention strategies, curiosity about hiring is on full charge.
There’s a lot to cover, but I’d like to share some thoughts about a moment that doesn’t get enough attention: The end of the first year and the beginning of the second.
Hiring is typically thought of as something you do once per person. Once someone’s hired, training, growing, and retaining are the next things you do. You may keep training someone, you may keep growing someone, you may keep promoting someone, but you surely don’t keep hiring someone.
It’s on that point I disagree.
I’ve found that, actually, you hire someone at least twice. You hire someone initially, and then, if all goes well, you hire them a…]]></summary>
        <author>
            <name>Jason Fried</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[In defense of the office]]></title>
        <id>https://world.hey.com/dhh/in-defense-of-the-office-450fc177</id>
        <link href="https://world.hey.com/dhh/in-defense-of-the-office-450fc177"/>
        <updated>2023-05-08T07:14:43.000Z</updated>
        <summary type="html"><![CDATA[You're never getting me back into an office. I credit much of my career to escaping that place in the early 2000s. It wasn't until I found the prolonged solitude of working from home that I could consistently make big leaps in my creative process. The pandemic taught millions the same lesson. And yet – AND YET! – I'm going to come to the defense of the office. 
Because I find it so nonsensical to hear remote-work advocates proclaim the universal, moral superiority of abolishing the office, as I did listening to those who couldn't envision productive work from home just a few minutes ago. Let's be real here. The modern world we live in was designed and executed from an office. It's a perfectly legitimate way of working.
It may not be your preferred way of working. It sure as hell isn't mine…]]></summary>
        <author>
            <name>David Heinemeier Hansson</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Programming types and mindsets]]></title>
        <id>https://world.hey.com/dhh/programming-types-and-mindsets-5b8490bc</id>
        <link href="https://world.hey.com/dhh/programming-types-and-mindsets-5b8490bc"/>
        <updated>2023-05-07T14:02:30.000Z</updated>
        <summary type="html"><![CDATA[One of the longest running schisms in programming is that of static vs dynamic typing. I've heard a million arguments from both sides throughout my entire career, but seen very few of them ever convinced anyone of anything. As rationalizations masquerading as reason rarely do in matters of faith. The rider will always justify the way of the elephant.
That's not to say there aren't people who've switched camps. In fact, such individuals usually shout the loudest rationalizations of all. Often with the charm of a livelong omnivore suddenly turning vegan or a traditional banker who caught a lucky ride on crypto. The shorter the faith, the brighter the flame.
Personally, I'm unashamedly a dynamic typing kind of guy. That's why I love Ruby so very much. It takes full advantage of dynamic typing…]]></summary>
        <author>
            <name>David Heinemeier Hansson</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Escaping creative downturns]]></title>
        <id>https://world.hey.com/dhh/escaping-creative-downturns-15281997</id>
        <link href="https://world.hey.com/dhh/escaping-creative-downturns-15281997"/>
        <updated>2023-05-06T15:10:09.000Z</updated>
        <summary type="html"><![CDATA[If I'm stuck in a creative downturn, there's usually only one remedy: keep going. That is, accept the downturn, but continue to stare at the computer, waiting for it to pass. While staring at the computer, there's room for menial and managerial tasks put aside during more inspired times. Checking up on things, getting back to people, and reading copious amount of internet. But it's still a creative deadzone.
Then the curse is usually broken when I'm sufficiently bored with the menial, the managerial, and the internet. That's the moment the creativity returns. When all the distractions have been drained of their doldrum. When there is literally nothing better to do than open the editor and code. 
I usually hit these downturns after a dopamine high, like one propelled by a particularly intense creative period. From working fervently on an idea, seeing it bloom, and then feeling the release of summer. As if fall must follow the flowers. As if the creative juices really are juices, and you can chug the jug. 
But it can also happen after being out of the routine for too long. Maybe a particularly bad streak of weeks filled with meetings or travel. Like the mind has to settle back into a comfortable groove before sprouting again.
I used to be more impatient with this oscillating process. Overly eager to get back riding high again. But as I've grown older, I've come to terms with the fact that it can't be eternal sunshine in the productive mind. You need to let weather pass. The grey, wet days of today soak the soil for the sun of tomorrow.
Complaining about the rain won't do you any good, anyway. Don't argue with nature. Just wait. It'll be bright before you know it.]]></summary>
        <author>
            <name>David Heinemeier Hansson</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Heard Something, Read Something, Saw Something [#14]]]></title>
        <id>https://world.hey.com/jason/heard-something-read-something-saw-something-14-d7628c64</id>
        <link href="https://world.hey.com/jason/heard-something-read-something-saw-something-14-d7628c64"/>
        <updated>2023-05-05T21:23:36.000Z</updated>
        <summary type="html"><![CDATA[Hey!
It’s been many months since my last installment of the Heard Something, Read Something, Saw Something series. Let’s get back into it.
So, what do we have this time...
Heard Something
A buddy randomly sent me this Turkish Electro Funk Güzel Mix on YouTube. This wasn’t on my radar at all, which is all the more reason I was glad he sent it.
Hear it: https://youtu.be/DQWokgdyeYw
Read Something
19 sharks were all found in the same condition: missing their livers, which had been sucked out through a clean tear in their shoulders. The rest of their organs remained intact. Who’s performing such surgery at sea, and possibly teaching others how to do it as well?
Read it: https://www.nationalgeographic.co.uk/animals/2023/03/why-are-these-orcas-killing-sharks-and-removing-their-livers
Saw Something
I can look at Slime Molds all day. Their forms, textures, and wide, whimsical variety are sublimely captivating. Here’s a good collection to get you started:
See it: https://www.barrywebbimages.co.uk/Images/Macro/Slime-Moulds-Myxomycetes/
Until next time.
BTW, if you like these, and think someone else might too, please forward it on. They can subscribe to my newsletter right at the top at https://world.hey.com/jason. Thank you.


-Jason]]></summary>
        <author>
            <name>Jason Fried</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to recover from microservices]]></title>
        <id>https://world.hey.com/dhh/how-to-recover-from-microservices-ce3803cc</id>
        <link href="https://world.hey.com/dhh/how-to-recover-from-microservices-ce3803cc"/>
        <updated>2023-05-05T08:33:52.000Z</updated>
        <summary type="html"><![CDATA[I won't deny there may well be cases where a microservices-first architecture makes sense, but I think they're few and far in between. The vast majority of systems are much better served by starting and staying with a majestic monolith. The Prime Video case study that blew up the internet yesterday is but the latest illustration.
Maybe once you reach the scale of Netflix or Amazon, there are areas where it starts to make sense, but remember that even the likes of GitHub and Shopify run their main applications as monoliths with millions of lines of code and have thousands of programmers collaborating on them. Do you have many more millions of lines of code or thousands of programmers working on the same code bases? If not, exercise extreme caution before even thinking about microservices.
B…]]></summary>
        <author>
            <name>David Heinemeier Hansson</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Even Amazon can't make sense of serverless or microservices]]></title>
        <id>https://world.hey.com/dhh/even-amazon-can-t-make-sense-of-serverless-or-microservices-59625580</id>
        <link href="https://world.hey.com/dhh/even-amazon-can-t-make-sense-of-serverless-or-microservices-59625580"/>
        <updated>2023-05-04T09:23:57.000Z</updated>
        <summary type="html"><![CDATA[The Prime Video team at Amazon has published a rather remarkable case study on their decision to dump their serverless, microservices architecture and replace it with a monolith instead. This move saved them a staggering 90%(!!) on operating costs, and simplified the system too. What a win!
But beyond celebrating their good sense, I think there's a bigger point here that applies to our entire industry. Here's the telling bit:

"We designed our initial solution as a distributed system using serverless components... In theory, this would allow us to scale each service component independently. However, the way we used some components caused us to hit a hard scaling limit at around 5% of the expected load."

That really sums up so much of the microservices craze that was tearing through the te…]]></summary>
        <author>
            <name>David Heinemeier Hansson</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sovereign clouds]]></title>
        <id>https://world.hey.com/dhh/sovereign-clouds-661eb5e4</id>
        <link href="https://world.hey.com/dhh/sovereign-clouds-661eb5e4"/>
        <updated>2023-05-03T08:01:29.000Z</updated>
        <summary type="html"><![CDATA[I've been talking about our departure from renting computers via AWS to owning them in a colocated datacenter as our "cloud exit". But I recognize this terminology can rub some people the wrong way. There's an entire generation of technologists who see themselves as "cloud native", and alienating them just because we want to own our hardware rather than rent it doesn't help anyone. Most of the skills of these cloud natives are useful regardless of where the applications run.
That skill overlap is actually part of why our transition out of AWS has gone so incredibly fast. 80-90% of what you need to know to run your own hardware these days is the same as what you need to know to operate in the rental clouds. From containers to load balancers to monitoring to performance analysis, and a milli…]]></summary>
        <author>
            <name>David Heinemeier Hansson</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Stabilizing async fn in traits in 2023]]></title>
        <id>https://blog.rust-lang.org/inside-rust/2023/05/03/stabilizing-async-fn-in-trait.html</id>
        <link href="https://blog.rust-lang.org/inside-rust/2023/05/03/stabilizing-async-fn-in-trait.html"/>
        <updated>2023-05-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The async working group's headline goal for 2023 is to stabilize a "minimum viable product" (MVP) version of async functions in traits. We are currently targeting Rust 1.74 for stabilization. This post lays out the features we plan to ship and the status of each one.
In November, we blogged about nightly support for async fn in trait and identified some key next steps, most importantly support for send bounds to allow spawning in generic functions. Since then we've done a significant amount of design exploration and collected a set of case studies evaluating how well the current code works in practice.
As of now, all of the functionality described in this blog post is available on the nightly compiler. Some of this work was implemented using experimental feature gates so that we could cond…]]></summary>
        <author>
            <name>Inside Rust Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Evaluating a redesign]]></title>
        <id>https://world.hey.com/jason/evaluating-a-redesign-80309257</id>
        <link href="https://world.hey.com/jason/evaluating-a-redesign-80309257"/>
        <updated>2023-05-02T17:26:50.000Z</updated>
        <summary type="html"><![CDATA[We're fortunate we get to make things. But sometimes something sticks around long enough that we have the good fortune to have a chance to remake it.
When evaluating a redesign, your first instinct is to compare the new design to the old design. But don’t do that.
The first step is to understand what you’re evaluating. If you just put the new design up against the old design, and compare the two, the old design will strongly influence your evaluation of the new design.

This is OK if nothing’s changed since the original design was launched. But it’s likely a lot has changed since then – especially if many months or years have passed.

Maybe there are new insights, maybe there’s new data, maybe there’s a new goal, maybe there’s a new hunch, or maybe there’s a whole new strategy at play. Maybe “make it readable” was important 3 years ago, while “help people see things they couldn’t see before” is more important today. Or maybe it’s both now.

But if the old design sets the tone about what’s important, then you may be losing out on an opportunity to make a significant leap forward. A design should never set the tone – ideas should set the tone. Ideas are independent of the design.

So, when evaluating a redesign you have to know what you’re looking for, not just what you’re looking at. How the new design compares to the old may be the least important thing to consider.

It’s a subtle thing, but it can make all the difference.


-Jason]]></summary>
        <author>
            <name>Jason Fried</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Cloud exit pays off in performance too]]></title>
        <id>https://world.hey.com/dhh/cloud-exit-pays-off-in-performance-too-4c53b697</id>
        <link href="https://world.hey.com/dhh/cloud-exit-pays-off-in-performance-too-4c53b697"/>
        <updated>2023-05-02T13:50:22.000Z</updated>
        <summary type="html"><![CDATA[Last week, we successfully pulled off our biggest cloud exit yet for Basecamp Classic. This is the original app that started it all for us from way back in 2004. And now, after a couple of years running on AWS, it's back on our own hardware, using MRSK, and holy smokes is it fast! Just look at these charts:
  
      
        

  
The median request now runs in just 19ms, compared to 67ms before. The mean request in 95ms vs 138ms. The median query time has dropped in half (which adds up when you do a lot of queries per request!). Basecamp Classic was no slouch in the cloud before, but now 95% of all requests are below that magic 300ms cut-off.
(But take these comparisons with a pound of salt. It's not exactly a clean-room, scientific test. Just a peak at the reality of leaving a fine-tuned …]]></summary>
        <author>
            <name>David Heinemeier Hansson</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The responsibility is the reward]]></title>
        <id>https://world.hey.com/dhh/the-responsibility-is-the-reward-69e5b73f</id>
        <link href="https://world.hey.com/dhh/the-responsibility-is-the-reward-69e5b73f"/>
        <updated>2023-05-02T10:23:55.000Z</updated>
        <summary type="html"><![CDATA[One of the straightest paths to purpose in life is to take responsibility for something (or someone). Becoming a person whose presence and competence benefits others. For both your sake and theirs.
Jordan Peterson calls this the "meaningful burden" in 12 Rules for Life, and downright posits it as an antidote to depression. Echoing Victor Frankl's famous quote "he who has a why to live for can bear almost any how" from Man's Search for Meaning.
There's something inherently counterintuitive about this notion that people who feel overwhelmed by life, or lost in its endless possibilities, might not need a lighter load, but a more meaningful burden instead. It reminds me of the version of burnout that stems not from overwork, but from under-purpose. Sometimes, the answer to "it's just all too m…]]></summary>
        <author>
            <name>David Heinemeier Hansson</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Story: From Project Management to Data Compression Innovator]]></title>
        <id>9a2308c2-d87e-44a2-921f-721115d24fdc</id>
        <link href="https://corecursive.com/data-compression-yann--collet/"/>
        <updated>2023-05-02T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[How do you accomplish something massive over time? I've had the chance to meet with a number of exceptional software developers and it's something I always wonder about. 
 Today, I might have an answer with the incredible story of Yann Collet.
 Yann was a project manager who went from being burnt out on corporate life to becoming one of the most sought-after developers in the world. What happens when you build something so impressive and valuable that it essentially becomes invisible?
 And how do you do that when your day job is mainly organizing spreadsheets and keeping timelines on track?
 Yann built LZ4 and ZStandard - two of the world's fastest compression algorithms that have transformed databases, operating systems, file systems, and much more. We'll go back in time to Yann's initial steps with programming, his game-changing discoveries along the way and how his devotion to data compression hobby led him to create something that saves billions of dollars worldwide.
 Episode Links
  
Episode Page
 Bonus 17 - Accomplishing Hard Things
 Support The Show
 Subscribe To The Podcast
 Join The Newsletter]]></summary>
        <author>
            <name>CoRecursive: Coding Stories</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Postmortem Analysis in Cargo]]></title>
        <id>https://blog.rust-lang.org/inside-rust/2023/05/01/cargo-postmortem.html</id>
        <link href="https://blog.rust-lang.org/inside-rust/2023/05/01/cargo-postmortem.html"/>
        <updated>2023-05-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[At 01:52 UTC, 2022-10-28, rust-lang/cargo#11183 was merged into the Cargo master branch. It introduced a bug that caused Cargo to fail to build packages that use a particular, but very common, dependency setup. The change nearly made its way into the next nightly release. If it had, it would have rendered any of the 30k crates with serde_derive as a dependency (one of the most popular crate on crates.io) unbuildable for anyone using the resulting nightly release.
Following this incident, the Cargo team went through a postmortem analysis, as is appropriate for incidents with (a potential for) broad blast-radius or otherwise significant impact. This time around, we followed a particular structured postmortem template in the hopes that it might make the resulting write-up more thorough, insig…]]></summary>
        <author>
            <name>Inside Rust Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Humble Chronicles: State Management]]></title>
        <id>https://tonsky.me/blog/humble-state/</id>
        <link href="https://tonsky.me/blog/humble-state/"/>
        <updated>2023-04-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Search for the best state management solution for Humble UI]]></summary>
        <author>
            <name>tonsky.me</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Record Type in TypeScript]]></title>
        <id>https://dmitripavlutin.com/typescript-record/</id>
        <link href="https://dmitripavlutin.com/typescript-record/"/>
        <updated>2023-04-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Record type simplifies typing objects in TypeScript. Let's see how you can benefit from it.]]></summary>
        <author>
            <name>Dmitri Pavlutin</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Founder & CEO is kinda a BS title]]></title>
        <id>https://world.hey.com/jason/founder-ceo-is-kinda-a-bs-title-9fe101e9</id>
        <link href="https://world.hey.com/jason/founder-ceo-is-kinda-a-bs-title-9fe101e9"/>
        <updated>2023-04-26T20:24:39.000Z</updated>
        <summary type="html"><![CDATA[Founder & CEO is a common title, especially in tech.
It happens to be my title too.
I've come to believe it's an impossible title. You're either CEO, or you're Founder. You can't hold both full-time jobs.
And unless your company is probably 100+, CEO isn't really a job anyway. It's more of a role someone needs to play occasionally.
There simply aren't that many big picture things or decisions to "execute" day in and day out — or even week in and week out — to make it a true full time job. A role yes, a hat to wear yes, a full-time job at a smallish company? No. It's part-time at best, quarter-time even better.
Further, the fundamental responsibilities of Founders and CEOs are at odds. Having them mashed up in the same title is as ridiculous as having someone who's a "CTO & Chief Luddite".
…]]></summary>
        <author>
            <name>Jason Fried</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Using ChatGPT as a technical writing assistant]]></title>
        <id>https://martinfowler.com/articles/2023-chatgpt-tech-writing.html</id>
        <link href="https://martinfowler.com/articles/2023-chatgpt-tech-writing.html"/>
        <updated>2023-04-26T14:49:00.000Z</updated>
        <summary type="html"><![CDATA[My colleague Mike Mason is an experienced software
     developer and architect. He's also an skillful writer, with a couple of
     books under his belt together with plenty of writing for Thoughtworks,
     including a regular macro-trends article and contributing to the
     Thoughtworks Technology Radar. In the last couple of months he's been
     experimenting with Large Language Models (LLMs) both for programming and
     prose writing. Here he focuses on the latter, sharing how he's been able to
     make effective use of ChatGPT.
more…]]></summary>
        <author>
            <name>Martin Fowler</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Getting America's mojo back]]></title>
        <id>https://world.hey.com/dhh/getting-america-s-mojo-back-7889dec1</id>
        <link href="https://world.hey.com/dhh/getting-america-s-mojo-back-7889dec1"/>
        <updated>2023-04-26T09:35:35.000Z</updated>
        <summary type="html"><![CDATA[There is no end to accounts of America's current ailments. From deaths of despair, soaring crime in some cities, ballooning debts, dysfunctional politics, and a raging culture war. It's easy to be down on those United States. Too easy, in fact.
Take gun deaths, for example. Americans own more guns per capita than any other country in the world, and by a huge margin too. Those guns are used by people to kill others and themselves. But while the homicide rate is up recently, it's still below where it was in the 90s or even the 70s. Suicides by gun haven't really swung that much either.
  
      
        

  
Is this a great place to be? No. Is it some historical new peak? No. Have past peaks come down? Yes. America is a violent country. It's been a violent country for a long time. This is no…]]></summary>
        <author>
            <name>David Heinemeier Hansson</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Announcing Rustup 1.26.0]]></title>
        <id>https://blog.rust-lang.org/2023/04/25/Rustup-1.26.0.html</id>
        <link href="https://blog.rust-lang.org/2023/04/25/Rustup-1.26.0.html"/>
        <updated>2023-04-25T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The rustup working group is happy to announce the release of rustup version 1.26.0. Rustup is the recommended tool to install Rust, a programming language that is empowering everyone to build reliable and efficient software.
If you have a previous version of rustup installed, getting rustup 1.26.0 is as easy as stopping any programs which may be using Rustup (e.g. closing your IDE) and running:
rustup self update

Rustup will also automatically update itself at the end of a normal toolchain update:
rustup update

If you don't have it already, you can get rustup from the appropriate page on our website.
What's new in rustup 1.26.0
This version of Rustup involves a significant number of internal cleanups, both in terms
of the Rustup code and its tests. In addition to a lot of work on the cod…]]></summary>
        <author>
            <name>Rust Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[What Does a Technical Author Look Like?]]></title>
        <id>https://martinfowler.com/articles/2023-tech-author-portrait.html</id>
        <link href="https://martinfowler.com/articles/2023-tech-author-portrait.html"/>
        <updated>2023-04-24T17:30:00.000Z</updated>
        <summary type="html"><![CDATA[While working with my colleague Mike Mason on a forthcoming article, we
     asked Stable Diffusion to come up with portraits of technical authors. We
     thought the results were worth sharing.
more…]]></summary>
        <author>
            <name>Martin Fowler</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Energy]]></title>
        <id>https://world.hey.com/jorge/energy-fd7c84d8</id>
        <link href="https://world.hey.com/jorge/energy-fd7c84d8"/>
        <updated>2023-04-23T18:49:48.000Z</updated>
        <summary type="html"><![CDATA[Internal energy is tricky. 


On the one hand, energy is more reliable than happiness. I liked this reflection by Jocko Willink in the Huberman podacast. Everyone experiences joy and sadness as part of their daily lives: keeping a certain energy level is more feasible than a certain level of happiness.


On the other hand, as with anything related to habits, it's way easier to preach than practice. Many years ago, someone I love dearly told me that he tried to do more of what he liked and less of what he didn't. I remember thinking, "Doh, what a naive approach to life". Now I think there is deep wisdom there. Your internal energy is the result of a balance. You can have more money by either making more or spending less; you need to pay attention to both.


In my case, I know pretty well wh…]]></summary>
        <author>
            <name>Jorge Manrubia</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Write Comments in React: The Good, the Bad and the Ugly]]></title>
        <id>https://dmitripavlutin.com/react-comments/</id>
        <link href="https://dmitripavlutin.com/react-comments/"/>
        <updated>2023-04-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[{/* Comment */} is the usual way to write comments in React. But there are 2 better ways to comment you just have to know.]]></summary>
        <author>
            <name>Dmitri Pavlutin</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Announcing Rust 1.69.0]]></title>
        <id>https://blog.rust-lang.org/2023/04/20/Rust-1.69.0.html</id>
        <link href="https://blog.rust-lang.org/2023/04/20/Rust-1.69.0.html"/>
        <updated>2023-04-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The Rust team is happy to announce a nice version of Rust, 1.69.0. Rust is a programming language empowering everyone to build reliable and efficient software.
If you have a previous version of Rust installed via rustup, you can get 1.69.0 with:
rustup update stable

If you don't have it already, you can get rustup from the appropriate page on our website, and check out the detailed release notes for 1.69.0 on GitHub.
If you'd like to help us out by testing future releases, you might consider updating locally to use the beta channel (rustup default beta) or the nightly channel (rustup default nightly). Please report any bugs you might come across!
What's in 1.69.0 stable
Rust 1.69.0 introduces no major new features. However, it contains many small improvements, including over 3,000 commits…]]></summary>
        <author>
            <name>Rust Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to continue making kerosene lamps on the eve of electricity]]></title>
        <id>https://world.hey.com/dhh/how-to-continue-making-kerosene-lamps-on-the-eve-of-electricity-5a8b8e1a</id>
        <link href="https://world.hey.com/dhh/how-to-continue-making-kerosene-lamps-on-the-eve-of-electricity-5a8b8e1a"/>
        <updated>2023-04-18T12:43:10.000Z</updated>
        <summary type="html"><![CDATA[The recent and rapid advance of AI has rightfully giving many in software real doubts about the future of their profession. I'd probably still wager that the fears are overstated – that we also got prematurely euphoric about the imminent prospects of self-driving cars – and that AI generating code is different from it evolving existing systems. But I wouldn't want to bet the house on it. This might just be The Big One.
That uncertainty, whether we truly are on the cusp of a total transformation, is a surprising novelty to me, despite thirty years in software. We've been through so many breathless predictions about how this or that advancement in software would simply "Change. Everything. Forever." that a certain pessimism would be perfectly reasonable.
I've seen, for example, at least thre…]]></summary>
        <author>
            <name>David Heinemeier Hansson</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[1.69.0 pre-release testing]]></title>
        <id>https://blog.rust-lang.org/inside-rust/2023/04/17/1.69.0-prerelease.html</id>
        <link href="https://blog.rust-lang.org/inside-rust/2023/04/17/1.69.0-prerelease.html"/>
        <updated>2023-04-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The 1.69.0 pre-release is ready for testing. The release is scheduled for
April 20. Release notes can be found here.
You can try it out locally by running:
RUSTUP_DIST_SERVER=https://dev-static.rust-lang.org rustup update stable

The index is https://dev-static.rust-lang.org/dist/2023-04-17/index.html.
You can leave feedback on the internals thread.
The release team is also thinking about changes to our pre-release process:
we'd love your feedback on this GitHub issue.]]></summary>
        <author>
            <name>Inside Rust Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Innovation is overrated]]></title>
        <id>https://world.hey.com/jason/innovation-is-overrated-4994874c</id>
        <link href="https://world.hey.com/jason/innovation-is-overrated-4994874c"/>
        <updated>2023-04-14T19:02:44.000Z</updated>
        <summary type="html"><![CDATA[Yesterday I was speaking to a university class and, as it usually does, a question about innovation came up.


"How do you stay innovative? How do you encourage innovative thinking at work?"


My answer: You don't stay innovative and you don't encourage innovative thinking at work.


WHAT? Yes.


Innovation should almost never happen. It's incredibly rare. It mostly happens by accident, not by intention. It's wonderful when it does, but you merely fluctuate in and out of it, it's not steady state.


Work is mostly mundane. It's mostly maintenance. It's mostly local improvement and iteration. Work is mostly... Work. Any innovation is an outlier, nearly a rounding error.


Even the most innovative projects or products are full of rote, prosaic stuff that still needs building. The poetic magic may be in the 5%, but the bulk of the work is in the other 95.


So I told the students they'd better get used to that. Work is not often very exciting, but it can absolutely be fulfilling. And you can be excited about that. But if you're expecting breakthroughs all the time, riff sessions that constantly lead somewhere new, or brainstorms that shoot lightning, you're going to be disappointed.


Yes innovation happens. Occasionally. Being happy at work is about finding challenge, reward, growth, and creative and intellectual stimulation in everything else.


Now... back to this new product we're building.


-Jason]]></summary>
        <author>
            <name>Jason Fried</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[4 Ways to Create an Enum in JavaScript]]></title>
        <id>https://dmitripavlutin.com/javascript-enum/</id>
        <link href="https://dmitripavlutin.com/javascript-enum/"/>
        <updated>2023-04-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[An enum is a set of named constants. The plain object, frozen object, proxied object or class-based are the 4 ways to create enums in JavaScript.]]></summary>
        <author>
            <name>Dmitri Pavlutin</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[An example of LLM prompting for programming]]></title>
        <id>https://martinfowler.com/articles/2023-chatgpt-xu-hao.html</id>
        <link href="https://martinfowler.com/articles/2023-chatgpt-xu-hao.html"/>
        <updated>2023-04-13T13:30:00.000Z</updated>
        <summary type="html"><![CDATA[A couple of weeks ago I watched a fascinating Zoom call hosted by Xu
     Hao, Thoughtworks's Head of Technology in China. He showed an
     example of how he uses ChatGPT to help him code in a self-testing
     style. His initial prompt primes the LLM with an implementation strategy
     (chain of thought prompting). His prompt also asks for an implementation
     plan rather than code (general knowledge prompting). Once he has the plan
     he uses it to refine the implementation and generate useful sections of
     code.
more…]]></summary>
        <author>
            <name>Martin Fowler</name>
        </author>
    </entry>
</feed>